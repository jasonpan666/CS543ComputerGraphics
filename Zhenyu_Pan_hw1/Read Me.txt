The figure above shows the layout of a polyline viewer you should produce. At the top of your viewport, 10 thumbnails (9 thumbnails of polylines above with 2 occurrences of dragon.dat) of the polyline files should be lined up. These 10 thumbnails should ALWAYS be visible at the top edge of the viewport whenever your program is running. The larger drawing area below the thumbnails is the main drawing area in which all drawing will be done. On start up, vinci.dat should be drawn in the main drawing area as a default. The default drawing color is red. The thumbnails AND main drawing automatically resize if the viewport is expanded or resized. 

Clicking on any thumbnails lined up at the top should make the corresponding polyline file the current drawing and draw a larger version of the polyline file to fill the main drawing area while maintaining aspect ratio. This is also known as the 'p state'. More details on the program behavior is given below. Your program should also have the following behavior and user (keyboard and mouse) interaction capabilities when you run it: 

Event: A key is pressed:
'p' key: (state p) Response: the program draws all polyline files provided at the top of the viewport in 10 equal-sized thumbnails (9 thumbnails of polylines above + 2 occurrences of dragon.dat) and draws vinci.dat in the "main drawing window". In the state p, if a user clicks on any of the thumbnails at the top, the corresponding polyline file in that thumbnail becomes the current drawing. The "main drawing space" is erased and the polyline in the thumbnail selected is redrawn to fill the entire "main drawing space". The default drawing color should be red

't' key: (state t) Response: A 5x5 tiling of all polyline files is drawn in the "main drawing space" (polyline thumbnails still at top edge). Repeatedly hitting the 't' key should create a different 5x5 tiling where the polyline drawn in any tile is "random".(polyline thumbnails still at the top edge and aspect ratios are maintained within each tile)

'e' key (state e) Response: PoliBook clears the screen and goes into drawing mode (polyline thumbnails still at the top edge). On the first click in the drawing area, a dot is drawn at wherever the user clicked. On subsequent clicks, a line is drawn from the last accepted mouse click position to the current mouse click position. Your program should be set up to accept up to 100 possible mouse clicks in one polyline. You can accept and store user-provided points in an array. If the 'b" key is held down while clicking, the current click point is NOT joined to the previous click point and instead a fresh polyline is started and drawn in addition to whatever previous polyline had been drawn. For instance, holding the "b" key down may be useful for beginning to draw the window of a house after drawing other parts. Part a) of the figure below shows how the drawing or addition of points works. The example shows a house in the process of being drawn; the user has just clicked at the position shown, and a line has been drawn from the previous point to the one designated by the mouse.

'g' key (state g) Response: Clear the screen and draw the gingerbread man described in class to fill the drawing area.

'f' key (state f) Response: Clear the screen and draw the Fern fractal described in class to fill the drawing area.

'c' key (state c) Response: Cycle the drawing color of whatever is drawn on the screen between Red, Green and Blue. For instance, if red is the current drawing color, hitting the 'c' key redraws everything in green. Hitting the 'c' key again redraws everything in Blue. Hitting the 'c' key again redraws everything in red, etc